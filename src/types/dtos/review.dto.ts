// src/backend/types/review.dto.ts

/**
 * @interface CreateReviewRequestDTO
 * @description Data Transfer Object for creating a new review.
 * This is the expected payload from the frontend when submitting a review.
 * 'id' and 'createdAt' are omitted as they are generated by the backend.
 */
export interface CreateReviewRequestDTO {
  orderId: string;
  productId: string;
  productName: string;
  buyerId: string;
  sellerId: string;
  sellerName: string;
  rating: number; // Rating (e.g., 1-5)
  comment: string; // Review comment
}

/**
 * @interface GetReviewsQueryDTO
 * @description Data Transfer Object for querying reviews.
 * Used for filtering and pagination when fetching reviews from the backend.
 */
export interface GetReviewsQueryDTO {
  productId?: string; // Optional: filter by product ID
  sellerId?: string; // Optional: filter by seller ID
  orderId?: string; // Optional: filter by order ID
  page?: number; // Optional: page number for pagination
  limit?: number; // Optional: number of items per page for pagination
}

/**
 * @interface ReviewResponseDTO
 * @description Data Transfer Object for a single review returned from the backend.
 * This matches the frontend's `Review` interface, with `createdAt` as a string.
 */
export interface ReviewResponseDTO {
  id: string;
  orderId: string;
  productId: string;
  productName: string;
  buyerId: string;
  sellerId: string;
  sellerName: string;
  rating: number;
  comment: string;
  createdAt: string; // ISO 8601 string representation of the creation date
}

/**
 * @interface GetReviewsResponseDTO
 * @description Data Transfer Object for a collection of reviews returned from the backend.
 * Includes pagination metadata.
 */
export interface GetReviewsResponseDTO {
  reviews: ReviewResponseDTO[]; // Array of review objects
  totalCount?: number; // Optional: total number of reviews matching the query
  page?: number; // Optional: current page number
  limit?: number; // Optional: number of items per page
}